from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager, Window, Dialog
from aiogram_dialog.widgets.kbd import Button, Back, SwitchTo, Select
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Button, Row, Back, Group, Select, Column, Next, SwitchTo

from .states import SettingsMenu
from .callbacks import confirm_delete_channel

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ –§–õ–û–£ ==================

async def open_flow_settings(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(SettingsMenu.flow_settings)

async def open_main_settings(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(SettingsMenu.main)

# ================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–õ–û–£ ==================

async def set_generation_frequency(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(SettingsMenu.generation_frequency)

async def set_character_limit(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(SettingsMenu.character_limit)

async def toggle_title_highlight(callback: CallbackQuery, button: Button, manager: DialogManager):
    current = manager.dialog_data.get("title_highlight", False)
    manager.dialog_data["title_highlight"] = not current
    await callback.answer(f"–í–∏–¥—ñ–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É {'—É–≤—ñ–º–∫–Ω–µ–Ω–æ' if not current else '–≤–∏–º–∫–Ω–µ–Ω–æ'}")

async def configure_ad_block(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(SettingsMenu.ad_block_settings)

async def set_posts_in_flow(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(SettingsMenu.posts_in_flow)

async def open_source_settings(callback: CallbackQuery, button: Button, manager: DialogManager):
    await manager.switch_to(SettingsMenu.source_settings)


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î-–ù–ê–°–¢–†–û–ï–ö ==================

async def set_frequency(callback: CallbackQuery, button: Button, manager: DialogManager):
    freq_map = {
        "freq_3h": 3,
        "freq_6h": 6,
        "freq_12h": 12,
        "freq_24h": 24
    }
    
    if button.widget_id in freq_map:
        manager.dialog_data["generation_freq"] = freq_map[button.widget_id]
        await callback.answer(f"–ß–∞—Å—Ç–æ—Ç—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –∫–æ–∂–Ω—ñ {freq_map[button.widget_id]} –≥–æ–¥–∏–Ω")
    else:
        await manager.switch_to(SettingsMenu.custom_frequency_input)
    
    await manager.back()

async def adjust_character_limit(callback: CallbackQuery, button: Button, manager: DialogManager):
    current = manager.dialog_data.get("char_limit", 1000)
    
    if button.widget_id == "increase_limit":
        new_limit = current + 100
    elif button.widget_id == "decrease_limit":
        new_limit = max(100, current - 100)
    elif button.widget_id == "disable_limit":
        new_limit = 0
    
    manager.dialog_data["char_limit"] = new_limit
    action = {
        "increase_limit": "–∑–±—ñ–ª—å—à–µ–Ω–æ",
        "decrease_limit": "–∑–º–µ–Ω—à–µ–Ω–æ",
        "disable_limit": "–≤–∏–º–∫–Ω–µ–Ω–æ"
    }.get(button.widget_id, "–∑–º—ñ–Ω–µ–Ω–æ")
    
    await callback.answer(f"–õ—ñ–º—ñ—Ç {action} –¥–æ {new_limit if new_limit > 0 else '‚àû'} –∑–Ω–∞–∫—ñ–≤")
    await manager.back()

# ================== –û–ö–ù–ê –ù–ê–°–¢–†–û–ï–ö –§–õ–û–£ ==================
def create_flow_settings_window():
    return Window(
        Format(
            "üîÑ <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –§–õ–û–£</b>\n\n"
            "üì¢ <b>–ö–∞–Ω–∞–ª:</b> {dialog_data[selected_channel].name}\n\n"
        ),
        Column(
            Button(Const("‚è± –ß–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"), id="generation_frequency", on_click=set_generation_frequency),
            Button(Const("üî† –û–±–º–µ–∂–µ–Ω–Ω—è –ø–æ –∑–Ω–∞–∫–∞–º"), id="character_limit", on_click=set_character_limit),
            Button(
                Format("üìå –í–∏–¥—ñ–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—É: {highlight_status}"), 
                id="title_highlight", 
                on_click=toggle_title_highlight
            ),
            Button(Const("üì¢ –†–µ–∫–ª–∞–º–Ω–∏–π –±–ª–æ–∫"), id="ad_block", on_click=configure_ad_block),
            Button(Const("üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ —É —Ñ–ª–æ—É"), id="posts_in_flow", on_click=set_posts_in_flow),
            Button(Const("üìö –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª"), id="source_settings", on_click=open_source_settings),
            Button(Const("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª"), id="delete_channel", on_click=confirm_delete_channel),
        ),
        Row(
            Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="open_main_settings", on_click=open_main_settings),
        ),
        state=SettingsMenu.flow_settings,
        parse_mode=ParseMode.HTML,
        getter=flow_settings_getter
    )

async def character_limit_getter(dialog_manager: DialogManager, **kwargs):
    return {
        "char_limit": dialog_manager.dialog_data.get("char_limit", 1000)
    }

async def flow_settings_getter(dialog_manager: DialogManager, **kwargs):
    current = dialog_manager.dialog_data.get("title_highlight", False)
    return {
        "highlight_status": "‚úÖ —É–≤—ñ–º–∫–Ω–µ–Ω–æ" if current else "‚ùå –≤–∏–º–∫–Ω–µ–Ω–æ"
    }

def create_frequency_settings_window():
    return Window(
        Const("‚è± <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó</b>\n\n"
             "–û–±–µ—Ä—ñ—Ç—å —è–∫ —á–∞—Å—Ç–æ –±–æ—Ç –±—É–¥–µ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏:"),
        Column(
            Button(Const("üïí –ö–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏"), id="freq_3h"),
            Button(Const("üïï –ö–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω"), id="freq_6h"),
            Button(Const("üïò –ö–æ–∂–Ω—ñ 12 –≥–æ–¥–∏–Ω"), id="freq_12h"),
            Button(Const("üåô –†–∞–∑ –Ω–∞ –¥–µ–Ω—å"), id="freq_24h"),
            Button(Const("‚úèÔ∏è –í–∫–∞–∑–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª"), id="custom_freq"),
        ),
        Row(
            Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="open_flow_settings", on_click=open_flow_settings),
        ),
        state=SettingsMenu.generation_frequency,
        parse_mode=ParseMode.HTML,
    )

def create_character_limit_window():
    return Window(
        Format(
            "üî† <b>–û–±–º–µ–∂–µ–Ω–Ω—è –ø–æ –∑–Ω–∞–∫–∞–º</b>\n\n"
            "–ü–æ—Ç–æ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: {char_limit} –∑–Ω–∞–∫—ñ–≤\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        ),
        Column(
            Button(Const("‚ûï –ó–±—ñ–ª—å—à–∏—Ç–∏"), id="increase_limit"),
            Button(Const("‚ûñ –ó–º–µ–Ω—à–∏—Ç–∏"), id="decrease_limit"),
            Button(Const("‚úèÔ∏è –í–∫–∞–∑–∞—Ç–∏ —Ç–æ—á–Ω–µ —á–∏—Å–ª–æ"), id="set_exact_limit"),
            Button(Const("‚ôæ –í–∏–º–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è"), id="disable_limit"),
        ),
        Row(
            Button(Const("‚óÄÔ∏è –ù–∞–∑–∞–¥"), id="open_flow_settings", on_click=open_flow_settings),
        ),
        state=SettingsMenu.character_limit,
        parse_mode=ParseMode.HTML,
        getter=character_limit_getter
    )