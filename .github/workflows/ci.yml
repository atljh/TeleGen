name: CI Pipeline

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master, dev]

env:
  DOCKER_IMAGE_NAME: telegram-bot
  PYTHON_VERSION: 3.11

jobs:
  build-dev-image:
    name: Build Dev Image (for tests & lint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build dev image
        run: |
          docker build --target dev -t ${{ env.DOCKER_IMAGE_NAME }}-dev .

  test:
    name: Run Tests inside Docker
    runs-on: ubuntu-latest
    needs: build-dev-image
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Django & Bot tests
        run: |
          docker run --rm \
            -e DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:5432/test_db \
            -e REDIS_URL=redis://host.docker.internal:6379/0 \
            -e SECRET_KEY=test-secret-key \
            -e DEBUG=False \
            ${{ env.DOCKER_IMAGE_NAME }}-dev \
            sh -c "python manage.py migrate --noinput && pytest tests/ -v"

  lint:
    name: Run Lint inside Docker
    runs-on: ubuntu-latest
    needs: build-dev-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Black, Isort, Flake8
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE_NAME }}-dev sh -c \
            "black --check . && isort --check-only . && flake8 ."

  build-prod-images:
    name: Build Production Docker Images
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Bot Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}-bot --target bot .

      - name: Build Admin Panel Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}-admin --target admin_panel .
