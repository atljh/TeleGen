name: CI/CD Pipeline

on:
  push:
    branches: [main, master, dev, feature/*]
  pull_request:
    branches: [main, master, dev]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and run tests with Docker Compose
        run: |
          docker-compose -f deployments/docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from tests

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-reports/
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install linting tools
        run: |
          pip install ruff black isort mypy flake8 django-stubs

      - name: Run Ruff
        run: ruff check .

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run security checks
        run: |
          pip install bandit safety
          bandit -r src/ -f json -o bandit-report.json -c .bandit.yaml
          safety check --json --output safety-report.json || echo "Safety check completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'push' && (contains(github.ref, 'main') || contains(github.ref, 'master') || contains(github.ref, 'dev'))

    outputs:
      bot-image-tag: ${{ steps.meta.outputs.tags }}
      admin-image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push bot image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployments/Dockerfile
          target: bot
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-bot:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push admin panel image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployments/Dockerfile
          target: admin_panel
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin:${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/telegen
            echo "Pulling latest images..."
            -f deployments/docker-compose.yml pull
            echo "Starting services..."
            -f deployments/docker-compose.yml up -d
            echo "Running migrations..."
            -f deployments/docker-compose.yml exec -T admin_panel python manage.py migrate
            echo "Staging deployment completed!"

      - name: Health check staging
        run: |
          curl -f https://${{ secrets.STAGING_HOST }}/health/ || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/telegen
            echo "Pulling production images..."
            -f deployments/docker-compose.prod.yml pull
            echo "Backing up database..."
            -f deployments/docker-compose.prod.yml exec -T db pg_dump -U $DB_USER $DB_NAME > backup_$(date +%Y%m%d_%H%M%S).sql
            echo "Starting services..."
            -f deployments/docker-compose.prod.yml up -d
            echo "Running migrations..."
            -f deployments/docker-compose.prod.yml exec -T admin_panel python manage.py migrate
            echo "Collecting static files..."
            -f deployments/docker-compose.prod.yml exec -T admin_panel python manage.py collectstatic --noinput
            echo "Production deployment completed!"

      - name: Health check production
        run: |
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health/ || exit 1
