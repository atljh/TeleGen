name: CI/CD Pipeline - Content Generation Bot

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '13'
  REDIS_VERSION: '7'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_content_bot
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install -r requirements/test.txt
          pip install pytest pytest-asyncio pytest-django coverage

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_content_bot
          DJANGO_SETTINGS_MODULE: config.settings.testing
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: "false"
          REDIS_URL: redis://localhost:6379/0
        run: python manage.py migrate --noinput

      - name: Run Django tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_content_bot
          DJANGO_SETTINGS_MODULE: config.settings.testing
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: "false"
          REDIS_URL: redis://localhost:6379/0
          TELEGRAM_BOT_TOKEN: "test:token"
          OPENAI_API_KEY: "test-key"
        run: |
          coverage run --source='.' manage.py test
          coverage xml
          coverage report

      - name: Run bot tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_content_bot
          REDIS_URL: redis://localhost:6379/0
          TELEGRAM_BOT_TOKEN: "test:token"
        run: python -m pytest src/bot/tests/ -v --cov=src.bot --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-backend

  test-bot:
    name: Bot Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_bot
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install -r requirements/bot.txt
          pip install pytest pytest-asyncio httpx

      - name: Run bot integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_bot
          REDIS_URL: redis://localhost:6379/0
          TELEGRAM_BOT_TOKEN: "test:token"
          OPENAI_API_KEY: "test-key"
        run: python -m pytest tests/integration/ -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run safety check
        run: |
          pip install safety
          safety check --full-report -r requirements/prod.txt

      - name: Run bandit
        run: |
          pip install bandit
          bandit -r src/ -x tests,__pycache__
          bandit -r bot/ -x tests,__pycache__

      - name: Run hadolint for Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: |
            ./Dockerfile

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [pre-commit, test-backend, test-bot, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}-web
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}-bot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Web image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          target: admin_panel
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}-web:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Bot image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          target: bot
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}-bot:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/content-generation-bot
            git pull origin develop
            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d
            docker system prune -f

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run performance tests
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
        run: |
          pip install locust
          locust -f tests/performance/load_test.py --headless -u 50 -r 5 -t 2m --host=${{ secrets.STAGING_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/content-generation-bot
            git pull origin main
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            docker system prune -f

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Send Telegram notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🤖 Content Bot Deployment ${{ job.status }}
            Repository: ${{ github.repositorys }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            By: ${{ github.actor }}
