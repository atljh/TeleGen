from django.db import models
from django.utils import timezone

class User(models.Model):
    telegram_id = models.BigIntegerField(unique=True, verbose_name="Telegram ID")
    username = models.CharField(
        max_length=100, blank=True, verbose_name="Telegram username"
    )
    first_name = models.CharField(
        max_length=100, blank=True, verbose_name="–Ü–º'—è"
    )
    last_name = models.CharField(
        max_length=100, blank=True, verbose_name="–ü—Ä—ñ–∑–≤–∏—â–µ"
    )
    subscription_status = models.BooleanField(
        default=False, verbose_name="–°—Ç–∞—Ç—É—Å –ø—ñ–¥–ø–∏—Å–∫–∏"
    )
    subscription_end_date = models.DateTimeField(
        null=True, blank=True, verbose_name="–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    subscription_type = models.CharField(
        max_length=50, blank=True, verbose_name="–¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏"
    )
    payment_method = models.CharField(max_length=50, blank=True)

    def __str__(self):
        return f"{self.username} (Telegram ID: {self.telegram_id})"

    class Meta:
        verbose_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        verbose_name_plural = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"


class Channel(models.Model):
    TIMEZONE_CHOICES = [
        ("Europe/Kiev", "üá∫üá¶ –ö–∏—ó–≤ (UTC+2)"),
        ("Europe/London", "üá™üá∫ –õ–æ–Ω–¥–æ–Ω (UTC+0)"),
        ("America/New_York", "üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫ (UTC-4)"),
    ]

    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="channels",
        verbose_name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
    )
    channel_id = models.CharField(max_length=100, unique=True, verbose_name="ID –∫–∞–Ω–∞–ª—É")
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞ –∫–∞–Ω–∞–ª—É")
    description = models.TextField(blank=True, verbose_name="–û–ø–∏—Å –∫–∞–Ω–∞–ª—É")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∏–π")
    notifications = models.BooleanField(default=False, verbose_name="–°–ø–æ–≤i—â–µ–Ω–Ω—è")
    timezone = models.CharField(
        max_length=50,
        choices=TIMEZONE_CHOICES,
        default="Europe/Kiev",
        verbose_name="–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å",
    )

    def __str__(self):
        return f"{self.name} (ID: {self.channel_id})"

    class Meta:
        verbose_name = "–ö–∞–Ω–∞–ª"
        verbose_name_plural = "–ö–∞–Ω–∞–ª–∏"


class Flow(models.Model):
    class ContentLength(models.TextChoices):
        to_100 = "to_100", "–î–æ 100 –∑–Ω–∞–∫—ñ–≤"
        to_300 = "to_300", "–î–æ 300 –∑–Ω–∞–∫—ñ–≤"
        to_1000 = "to_1000", "–î–æ 1000 –∑–Ω–∞–∫—ñ–≤"

    class GenerationFrequency(models.TextChoices):
        HOURLY = "hourly", "–ö–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É"
        TWELVEHOUR = "12h", "–†–∞–∑ –Ω–∞ 12 –≥–æ–¥"
        DAILY = "daily", "–†–∞–∑ –Ω–∞ –¥–µ–Ω—å"

    channel = models.OneToOneField(
        Channel, on_delete=models.CASCADE, primary_key=False, unique=True
    )
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞ —Ñ–ª–æ—É")
    theme = models.CharField(max_length=100, verbose_name="–¢–µ–º–∞—Ç–∏–∫–∞")
    sources = models.JSONField(
        default=list, verbose_name="–î–∂–µ—Ä–µ–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
    )  # –°–ø–∏—Å–æ–∫: [{"type": "telegram", "link": "..."}, ...]
    content_length = models.CharField(
        max_length=50, choices=ContentLength.choices, verbose_name="–û–±—Å—è–≥ —Ç–µ–∫—Å—Ç—É"
    )
    use_emojis = models.BooleanField(default=False, verbose_name="–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ")
    use_premium_emojis = models.BooleanField(
        default=False, verbose_name="–ü—Ä–µ–º—ñ—É–º –µ–º–æ–¥–∑—ñ"
    )
    title_highlight = models.BooleanField(
        default=False, verbose_name="–í–∏–¥—ñ–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤"
    )
    cta = models.BooleanField(default=False, verbose_name="–ó–∞–∫–ª–∏–∫ –¥–æ –¥—ñ—ó (CTA)")
    frequency = models.CharField(
        max_length=50,
        choices=GenerationFrequency.choices,
        verbose_name="–ß–∞—Å—Ç–æ—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó",
    )
    signature = models.TextField(blank=True, verbose_name="–ü—ñ–¥–ø–∏—Å –¥–æ –ø–æ—Å—Ç—ñ–≤")
    flow_volume = models.PositiveSmallIntegerField(
        default=5, verbose_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤ —É —Ñ–ª–æ—É"
    )
    ad_time = models.CharField(
        max_length=5,
        blank=True,
        verbose_name="–ß–∞—Å –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–∏—Ö —Ç–æ–ø—ñ–≤ (HH:MM)",
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")

    next_generation_time = models.DateTimeField(
        null=True, blank=True, verbose_name="–ù–∞—Å—Ç—É–ø–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è"
    )
    last_generated_at = models.DateTimeField(
        null=True, blank=True, verbose_name="–û—Å—Ç–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è"
    )

    def __str__(self):
        return f"{self.name} ({self.theme})"

    class Meta:
        verbose_name = "–§–ª–æ—É"
        verbose_name_plural = "–§–ª–æ—É"
        ordering = ["-created_at"]
        indexes = [
            models.Index(fields=["channel", "created_at"]),
            models.Index(fields=["name"]),
        ]


class PostImage(models.Model):
    post = models.ForeignKey(
        "Post", on_delete=models.CASCADE, related_name="images", verbose_name="–ü–æ—Å—Ç"
    )
    image = models.ImageField(
        upload_to="posts/images/", verbose_name="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", max_length=255
    )
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è")

    class Meta:
        verbose_name = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç–∞"
        verbose_name_plural = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤"
        ordering = ["order"]

    def __str__(self):
        return f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ—Å—Ç–∞ {self.post.id}"

class PostVideo(models.Model):
    post = models.ForeignKey(
        "Post", on_delete=models.CASCADE, related_name="videos", verbose_name="–ü–æ—Å—Ç"
    )
    image = models.FileField(
        upload_to="posts/videos/", verbose_name="–íi–¥–µ–æ", max_length=255
    )
    order = models.PositiveIntegerField(default=0, verbose_name="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è")

    class Meta:
        verbose_name = "–íi–¥–µ–æ –ø–æ—Å—Ç–∞"
        verbose_name_plural = "–íi–¥–µ–æ –ø–æ—Å—Ç—ñ–≤"
        ordering = ["order"]

    def __str__(self):
        return f"–íi–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞ {self.post.id}"


class Post(models.Model):
    DRAFT = "draft"
    SCHEDULED = "scheduled"
    PUBLISHED = "published"

    STATUS_CHOICES = [
        (DRAFT, "–ß–µ—Ä–Ω–µ—Ç–∫–∞"),
        (SCHEDULED, "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"),
        (PUBLISHED, "–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ"),
    ]

    flow = models.ForeignKey(
        Flow, on_delete=models.CASCADE, related_name="posts", verbose_name="–§–ª–æ—É"
    )
    content = models.TextField(verbose_name="–ö–æ–Ω—Ç–µ–Ω—Ç")
    original_content = models.TextField(
        verbose_name="–û—Ä–∏–≥i–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç", blank=True, default=""
    )
    status = models.CharField(
        max_length=10, choices=STATUS_CHOICES, default=DRAFT, verbose_name="–°—Ç–∞—Ç—É—Å"
    )
    source_id = models.CharField(
        max_length=255,
        unique=True,
        blank=True,
        null=True,
        verbose_name="–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID —ñ–∑ –¥–∂–µ—Ä–µ–ª–∞",
        help_text="–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç—É –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –¥–∂–µ—Ä–µ–ª—ñ (Telegram/Web)",
    )
    source_url = models.URLField(
        blank=True, null=True, verbose_name="–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–∂–µ—Ä–µ–ª–æ"
    )
    original_link = models.CharField(
        blank=True, verbose_name="–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Ä–∏–≥i–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç"
    )
    publication_date = models.DateTimeField(
        blank=True, null=True, verbose_name="–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
    )
    scheduled_time = models.DateTimeField(
        null=True, blank=True, verbose_name="–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏–π —á–∞—Å"
    )
    original_date = models.DateTimeField(
        blank=True, null=True, verbose_name="–î–∞—Ç–∞ –æ—Ä–∏–≥i–Ω–∞–ª—å–Ω–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")

    @property
    def media_type(self):
        if self.images.exists():
            return "image"
        elif self.videos.exists():
            return "video"
        return None

    @property
    def images_list(self):
        return list(self.images.all())


    def __str__(self):
        return f"–ü–æ—Å—Ç –≤—ñ–¥ {self.created_at.strftime('%Y-%m-%d %H:%M')}"

    class Meta:
        verbose_name = "–ü–æ—Å—Ç"
        verbose_name_plural = "–ü–æ—Å—Ç–∏"
        constraints = [
            models.UniqueConstraint(
                fields=["source_id"],
                name="unique_source_id",
                condition=models.Q(source_id__isnull=False),
            )
        ]


class Draft(models.Model):
    user = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="drafts", verbose_name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    )
    post = models.ForeignKey(
        Post, on_delete=models.CASCADE, related_name="drafts", verbose_name="–ü–æ—Å—Ç"
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")

    def __str__(self):
        return f"–ß–µ—Ä–Ω–µ—Ç–∫–∞ –¥–ª—è {self.user.username}"

    class Meta:
        verbose_name = "–ß–µ—Ä–Ω–µ—Ç–∫–∞"
        verbose_name_plural = "–ß–µ—Ä–Ω–µ—Ç–∫–∏"


class Subscription(models.Model):
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="subscriptions",
        verbose_name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
    )
    channel = models.ForeignKey(
        Channel,
        on_delete=models.CASCADE,
        related_name="subscriptions",
        verbose_name="–ö–∞–Ω–∞–ª",
    )
    subscription_type = models.CharField(max_length=50, verbose_name="–¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏")
    start_date = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É")
    end_date = models.DateTimeField(verbose_name="–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–∞")

    def __str__(self):
        return f"–ü—ñ–¥–ø–∏—Å–∫–∞ {self.subscription_type} –¥–ª—è {self.user.username}"

    class Meta:
        verbose_name = "–ü—ñ–¥–ø–∏—Å–∫–∞"
        verbose_name_plural = "–ü—ñ–¥–ø–∏—Å–∫–∏"


class Payment(models.Model):
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="payments",
        verbose_name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
    )
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–∞")
    payment_method = models.CharField(max_length=50, verbose_name="–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏")
    payment_date = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏")
    is_successful = models.BooleanField(default=False, verbose_name="–£—Å–ø—ñ—à–Ω–∏–π")

    def __str__(self):
        return f"–ü–ª–∞—Ç—ñ–∂ {self.amount} –≤—ñ–¥ {self.user.username}"

    class Meta:
        verbose_name = "–ü–ª–∞—Ç—ñ–∂"
        verbose_name_plural = "–ü–ª–∞—Ç–µ–∂—ñ"


class AISettings(models.Model):
    flow = models.OneToOneField(
        Flow,
        on_delete=models.CASCADE,
        related_name="ai_settings",
        verbose_name="–§–ª–æ—É",
        blank=True,
        null=True,
    )
    prompt = models.TextField(verbose_name="–ü—Ä–æ–º–ø—Ç")
    role = models.CharField(max_length=255, verbose_name="–†–æ–ª—å", blank=True)
    role_content = models.TextField(verbose_name="–¢–µ–∫—Å—Ç —Ä–æ–ª–∏", blank=True)
    style = models.CharField(max_length=100, verbose_name="–°—Ç–∏–ª—å", blank=True)
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")

    def __str__(self):
        return f"–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI –¥–ª—è {self.flow}"

    class Meta:
        verbose_name = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI"
        verbose_name_plural = "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI"


class Statistics(models.Model):
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="statistics",
        verbose_name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
    )
    channel = models.ForeignKey(
        Channel,
        on_delete=models.CASCADE,
        related_name="statistics",
        verbose_name="–ö–∞–Ω–∞–ª",
    )
    total_posts = models.IntegerField(default=0, verbose_name="–í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤")
    total_views = models.IntegerField(default=0, verbose_name="–í—Å—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤")
    total_likes = models.IntegerField(default=0, verbose_name="–í—Å—å–æ–≥–æ –ª–∞–π–∫—ñ–≤")
    last_updated = models.DateTimeField(auto_now=True, verbose_name="–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")

    def __str__(self):
        return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {self.user.username}"

    class Meta:
        verbose_name = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        verbose_name_plural = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
