
import pytest
import sys
from unittest.mock import AsyncMock, patch
from aiogram import types
from aiogram.filters import Command

from bot.handlers.basic_commands import basic_commands_router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Dispatcher

@pytest.fixture
def mock_dispatcher():
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    dp.include_router(basic_commands_router)
    return dp

@pytest.mark.asyncio
async def test_start_command(mock_dispatcher, fake_message):
    fake_message.answer = AsyncMock()

    await mock_dispatcher.feed_update(types.Update(
        update_id=1,
        message=fake_message
    ))

    assert fake_message.answer.called
    response_text = fake_message.answer.call_args[0][0]

    assert "üëã **–í—ñ—Ç–∞—î–º–æ —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ!**" in response_text
    assert "–©–æ–± –ø–æ—á–∞—Ç–∏, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /help" in response_text

@pytest.mark.asyncio
async def test_help_command(mock_dispatcher, fake_message):
    fake_message.answer = AsyncMock()

    await mock_dispatcher.feed_update(types.Update(
        update_id=1,
        message=fake_message
    ))

    assert fake_message.answer.called

    response_text = fake_message.answer.call_args[0][0]
    assert "üÜò **–î–æ–ø–æ–º–æ–≥–∞**" in response_text
    assert "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏" in response_text
    assert "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" in response_text
    assert "/price - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ü—ñ–Ω–∏" in response_text

@pytest.mark.asyncio
async def test_settings_command(mock_dispatcher, fake_message):
    fake_message.answer = AsyncMock()

    await mock_dispatcher.feed_update(types.Update(
        update_id=1,
        message=fake_message
    ))

    assert fake_message.answer.called

    response_text = fake_message.answer.call_args[0][0]
    assert "‚öô **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞**" in response_text
    assert "–ú–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É" in response_text
    assert "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è" in response_text
    assert "–û—Å–æ–±–∏—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏" in response_text

@pytest.mark.asyncio
async def test_price_command(mock_dispatcher, fake_message):
    fake_message.answer = AsyncMock()

    await mock_dispatcher.feed_update(types.Update(
        update_id=1,
        message=fake_message
    ))

    assert fake_message.answer.called

    response_text = fake_message.answer.call_args[0][0]
    assert "üíµ **–ù–∞—à—ñ —Ü—ñ–Ω–∏**" in response_text
    assert "üîπ –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ - 100 –≥—Ä–Ω/–º—ñ—Å" in response_text
    assert "üîπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∞—Ä–∏—Ñ - 200 –≥—Ä–Ω/–º—ñ—Å" in response_text
    assert "üîπ –ü—Ä–µ–º—ñ—É–º —Ç–∞—Ä–∏—Ñ - 350 –≥—Ä–Ω/–º—ñ—Å" in response_text

@pytest.mark.asyncio
async def test_menu_command(mock_dispatcher, fake_message):
    fake_message.answer = AsyncMock()

    await mock_dispatcher.feed_update(types.Update(
        update_id=1,
        message=fake_message
    ))

    assert fake_message.answer.called

    response_text = fake_message.answer.call_args[0][0]
    assert "üì± **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**" in response_text
    assert "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç:" in response_text

    call_args = fake_message.answer.call_args
    assert 'reply_markup' in call_args.kwargs
    keyboard = call_args.kwargs['reply_markup']
    assert keyboard is not None
    assert len(keyboard.keyboard) == 3
    assert "‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" in keyboard.keyboard[0][0].text
    assert "üÜò –î–æ–ø–æ–º–æ–≥–∞" in keyboard.keyboard[1][0].text
    assert "üíµ –¶—ñ–Ω–∏" in keyboard.keyboard[2][0].text
