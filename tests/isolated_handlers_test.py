
import pytest
import sys
from unittest.mock import AsyncMock, patch
from aiogram import types
from aiogram.filters import Command

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append("/Users/fyodorlukashov/Music/TeleGen")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —á–∞—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from bot.handlers.basic_commands import basic_commands_router

@pytest.fixture
def mock_message():
    message = AsyncMock(spec=types.Message)
    message.answer = AsyncMock()
    message.text = "/start"
    return message

@pytest.fixture
def mock_update(mock_message):
    update = AsyncMock(spec=types.Update)
    update.message = mock_message
    return update

@pytest.mark.asyncio
async def test_start_command_handler(mock_update):
    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    router = basic_commands_router

    # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    start_handler = None
    for handler in router.update_handlers.handlers:
        if hasattr(handler, 'filters') and Command("start") in handler.filters:
            start_handler = handler.callback
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
    assert start_handler is not None

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await start_handler(mock_update.message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_update.message.answer.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    response_text = mock_update.message.answer.call_args[0][0]
    assert "üëã **–í—ñ—Ç–∞—î–º–æ —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ!**" in response_text
    assert "–©–æ–± –ø–æ—á–∞—Ç–∏, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /help" in response_text

@pytest.mark.asyncio
async def test_help_command_handler(mock_update):
    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    router = basic_commands_router

    # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
    help_handler = None
    for handler in router.update_handlers.handlers:
        if hasattr(handler, 'filters') and Command("help") in handler.filters:
            help_handler = handler.callback
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
    assert help_handler is not None

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await help_handler(mock_update.message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_update.message.answer.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    response_text = mock_update.message.answer.call_args[0][0]
    assert "üÜò **–î–æ–ø–æ–º–æ–≥–∞**" in response_text
    assert "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏" in response_text
    assert "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" in response_text
    assert "/price - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ü—ñ–Ω–∏" in response_text

@pytest.mark.asyncio
async def test_settings_command_handler(mock_update):
    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    router = basic_commands_router

    # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /settings
    settings_handler = None
    for handler in router.update_handlers.handlers:
        if hasattr(handler, 'filters') and Command("settings") in handler.filters:
            settings_handler = handler.callback
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
    assert settings_handler is not None

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await settings_handler(mock_update.message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_update.message.answer.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    response_text = mock_update.message.answer.call_args[0][0]
    assert "‚öô **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞**" in response_text
    assert "–ú–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É" in response_text
    assert "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è" in response_text
    assert "–û—Å–æ–±–∏—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏" in response_text

@pytest.mark.asyncio
async def test_price_command_handler(mock_update):
    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    router = basic_commands_router

    # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /price
    price_handler = None
    for handler in router.update_handlers.handlers:
        if hasattr(handler, 'filters') and Command("price") in handler.filters:
            price_handler = handler.callback
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω
    assert price_handler is not None

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await price_handler(mock_update.message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω
    mock_update.message.answer.assert_called_once()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    response_text = mock_update.message.answer.call_args[0][0]
    assert "üíµ **–ù–∞—à—ñ —Ü—ñ–Ω–∏**" in response_text
    assert "üîπ –ë–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ - 100 –≥—Ä–Ω/–º—ñ—Å" in response_text
    assert "üîπ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∞—Ä–∏—Ñ - 200 –≥—Ä–Ω/–º—ñ—Å" in response_text
    assert "üîπ –ü—Ä–µ–º—ñ—É–º —Ç–∞—Ä–∏—Ñ - 350 –≥—Ä–Ω/–º—ñ—Å" in response_text
